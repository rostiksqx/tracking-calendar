@page "/"
@using TrackingCalendar.Services
@using Task = TrackingCalendar.Models.Entity.Task
@inject ITaskService TaskService
@rendermode InteractiveServer

<PageTitle>Task Tracking Calendar</PageTitle>

<h3>Task Calendar</h3>

<div class="border" style="padding: 20px;">
    <TaskItemForm OnItemAdded="@TaskChanged" />
</div>

<table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>Description</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Completed/Uncompleted</th>
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var task in _tasks)
    {
        <tr>
            <td>@task.Title</td>
            <td>@task.Description</td>
            <td>@task.StartDate.ToShortDateString()</td>
            <td>@task.EndDate.ToShortDateString()</td>
            <td>@(task.IsCompleted ? "Completed" : "Uncompleted")</td>
            <td>
                <button class="btn btn-primary" @onclick="() => CompleteTask(task)" >@(task.IsCompleted ? "UnComplete" : "Complete")</button>
                <button class="btn btn-danger">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@code
{
    private List<Task> _tasks = [];

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        _tasks = await TaskService.GetTasksAsync();
    }

    private async void TaskChanged()
    {
        _tasks = await TaskService.GetTasksAsync();
        StateHasChanged();
    }
    
    private async void CompleteTask(Task task)
    {
        task.IsCompleted = !task.IsCompleted;
        await TaskService.UpdateTask(task);
    }
}
