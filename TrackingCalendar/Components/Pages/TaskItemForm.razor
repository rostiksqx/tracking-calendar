@using TrackingCalendar.Services
@using Task = TrackingCalendar.Models.Entity.Task
@inject ITaskService TaskService

@if (ShowForm)
{
    <div style="display: flex; justify-content: space-between">
        <h4 style="padding-top: 10px">New Task</h4>
        <button class="btn" @onclick="() => ShowForm = false">X</button>
    </div>
    <EditForm OnValidSubmit="ItemAdded" Model="selectedTask" FormName="TaskItemForm">
        <div class="page">
            <label for="title" style="margin-right: 10px">Title:</label>
            <InputText id="title" @bind-Value="selectedTask.Title" class="form-control" style="margin-right: 10px"/>

            <label for="description" style="margin: 10px 10px 10px 0">Description</label>
            <InputText id="description" @bind-Value="selectedTask.Description" class="form-control" style="margin-right: 10px"/>

            <label for="startDate" style="margin: 10px 10px 10px 0;">Start Date:</label>
            <InputDate id="startDate" @bind-Value="selectedTask.StartDate" class="form-control" style="margin-right: 10px"/>

            <label for="endDate" style="margin: 10px 10px 10px 0">End Date:</label>
            <InputDate id="endDate" @bind-Value="selectedTask.EndDate" class="form-control" style="margin-right: 10px"/>

            <div style="margin-top: 10px">
                <button type="submit" class="btn btn-primary" style="margin-right: 10px">Add</button>
                <input type="reset" class="btn btn-secondary" value="Clear"/>
            </div>
        </div>
    </EditForm>
}
else 
{
    <button class="btn btn-primary" @onclick="() => ShowForm = true">Add Task</button>
}

@code {
    [Parameter]
    public required Action OnItemAdded { get; set; }

    private bool ShowForm = false;
    
    private Task selectedTask = new Task();

    private async System.Threading.Tasks.Task ItemAdded()
    {
        var newTask = new Task
        {
            Title = selectedTask.Title,
            Description = selectedTask.Description,
            StartDate = DateTime.SpecifyKind(selectedTask.StartDate, DateTimeKind.Utc),
            EndDate = DateTime.SpecifyKind(selectedTask.EndDate, DateTimeKind.Utc)
        };
        
        await TaskService.AddTask(newTask);
        selectedTask = new Task();
        ShowForm = false;

        OnItemAdded?.Invoke();
    }
}